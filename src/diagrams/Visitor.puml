@startuml

interface Function {
    + accept(Visitor)
}

class Value implements Function{
    value: double
}

class Variable implements Function{
    variable: string
}

class Addition implements Function{
    function1: Function
    function2: Function
}

class Subtract implements Function{
    function1: Function
    function2: Function
}

class Multiplication implements Function{
    function1: Function
    function2: Function
}

class Division implements Function{
    function1: Function
    function2: Function
}

class SquareRoot implements Function{
    function1: Function
}

class Power implements Function{
    function1: Function
    function2: Function
}

class Absolute implements Function{
    function1: Function
}

interface Visitor{
    + visit(Absolute)
    + visit(Addition)
    + visit(Division)
    + visit(Multiplication)
    + visit(SquareRoot)
    + visit(Subtraction)
    + visit(Value)
    + visit(Variable)
}

Function -> Visitor

class PrintVisitor implements Visitor{
    + print(Function)
}

class CalculateVisitor implements Visitor{
    + evaluate(Function)
}

class VariableVisitor implements Visitor{
    + getVariables(Function)
}

@enduml
class Negate implements Function{
    value: Function
}